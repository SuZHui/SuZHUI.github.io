{"componentChunkName":"component---src-template-blog-post-js","path":"/article/AE8E8ED98D53D569","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>要知道什么是 Travis CI，首先要知道什么是持续集成。\n持续集成，Continuous Integration，简称CI，CI服务器会自动监听项目的变化, 开发者可以在git hook中配置预处理逻辑, 方便开发、测试、以及部署。</p>\n</blockquote>\n<h3>Job Lifcycle</h3>\n<p>Travis CI的工作由两个主要部分组成：</p>\n<ol>\n<li><strong>安装</strong> 安装所需的任何依赖项</li>\n<li><strong>脚本</strong> 运行构建脚本</li>\n</ol>\n<p>可以在安装阶段(before_install)前，脚本阶段之前（before_script）或之后（after_script）运行自定义命令。</p>\n<p>完整的生命周期，包括三个可选的部署阶段，以及在检出git存储库和更改到存储库目录之后</p>\n<ol>\n<li>可选安装 apt addons</li>\n<li>可选安装 cache components</li>\n<li>before_install</li>\n<li>install</li>\n<li>before_script</li>\n<li>script</li>\n<li>可选before_cache（用于清理缓存）</li>\n<li>after_success 和 after_failure</li>\n<li>可选的 before_deploy</li>\n<li>可选的 deploy</li>\n<li>可选的 after_deploy</li>\n<li>after_script</li>\n</ol>\n<p>一次构建可以存在多次生命周期</p>\n<h3>获取Github权限</h3>\n<blockquote>\n<p>由Travis CI执行脚本进行部署的时候，如何让Travis有权限往 Github 提交代码呢?</p>\n</blockquote>\n<p>Github有提供一个<a href=\"https://github.blog/2013-05-16-personal-api-tokens/\">Personal access tokens</a>, 这个token与 账号密码以及SSH Keys一样，具有Github写入能力。</p>\n<p>在Github账户的Settings页面，选择Developer settings -> Personal access tokens, 进入页面后在面板右侧找到'Generate new token'新建一个token。</p>\n<p><img src=\"https://neveryu.github.io/images/travis-ci-2.png\" alt=\"generate new token\"></p>\n<blockquote>\n<p>注意： token仅在创建完成时可见，之后访问是无法看到的（只能看到名称），因此需要提前保存好token。</p>\n</blockquote>\n<h3>配置环境变量</h3>\n<p>在<a href=\"https://travis-ci.com/\">Travis官网</a>的项目设置页里，有一个<code>Environment Variables</code> 的配置项，设置一个环境变量名，然后将前面生产的token添加进去，这样在travis运行脚本时就可在环境中读取该变量了。</p>\n<p><img src=\"https://neveryu.github.io/images/travis-ci-3.png\" alt=\"set environment variables\"></p>\n<p>后续可以在脚本内以<code>${变量名}</code>的形式使用token.(其它参数也可以统一的形式进行设置)</p>\n<blockquote>\n<p>注意: 添加token为环境变量时，记得用密文，否则在<code>build log</code>中是可以被看到的</p>\n</blockquote>\n<h3>如何跳过自动构建</h3>\n<p>如果commit不想让Travis进行构建，可以在commit message中加上<code>[ci skip]</code>，Travis将会跳过该次提交。</p>\n<h3>配置.travis.yml</h3>\n<pre><code class=\"language-yml\">deploy:\n  provider: pages\n  skip_cleanup: true\n  github_token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable\n  keep_history: true\n  on:\n    branch: master\n</code></pre>\n<ul>\n<li>local_dir：要推送到GitHub页面的目录，默认为当前目录。可以指定为当前目录的绝对路径或相对路径。</li>\n<li>repo：Repo slug，默认为当前回购。</li>\n<li>target_branch：分支到（强制，请参阅keep_history:)将local_dir 内容推送到，默认为gh-pages。</li>\n<li>keep_history：可选，创建增量提交而不是执行推力，默认为false。</li>\n<li>fqdn：可选，为您的网站设置自定义域，默认为不支持自定义域。</li>\n<li>project_name：默认值为fqdn或repo slug，用于元数据。</li>\n<li>email：可选，提交者信息，默认为deploy@travis-ci.org。</li>\n<li>name：可选，提交者，默认为Deployment Bot。</li>\n<li>committer_from_gh：可选，默认为false。允许您使用令牌的所有者名称和电子邮件进行提交。覆盖email和name选项。</li>\n<li>allow_empty_commit：可选，默认为false。仅keep_history在启用时启用 true。</li>\n<li>github_url：可选，自托管GitHub企业的URL，默认为github.com。</li>\n<li>verbose：可选，请详细了解内部步骤，默认为false。</li>\n<li>deployment_file：可选，默认为false，可以创建deployment-info文件。</li>\n</ul>","frontmatter":{"date":"June 28, 2019","path":"/article/AE8E8ED98D53D569","title":"使用Travis实现持续集成"}},"site":{"siteMetadata":{"title":"Just A Little","description":"just a little blog","author":"@SuZHui <https://github.com/SuZHui>"}}},"pageContext":{}},"staticQueryHashes":["4224293195"]}